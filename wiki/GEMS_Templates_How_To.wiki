#summary This page describes how to create and work with GEMS templates to change the look, feel, and interaction with a model.

= Introduction =

GEMS uses this type information to look up a template to use to generate the view for a model element. Templates can be written in multiple languages -- as long as GEMS has the appropriate !TemplateExecutor installed. The next sections of this tutorial are going to focus on GEMS' default template language. Detailed instructions for creating a new templating language are near the end of this guide.

= How Templates are Resolved =

Each element in a model has a type associated with it. Furthermore, each model also has a type associated with it. 

{{{
MetaType mt = TypeManager.getOrCreateTypeForName(
                                         "default", //the model's type
                                         "ClientModelObject" //the element's type
                                           );
ClientModelObject root = new ClientModelObject("root",mt);
}}}



By default, GEMS looks through the "templates" subdirectory of its installation path to find a template for an element. For example, to find a template for an element of type "ClientModelObject" attached to a model of type "default", GEMS will search for files matching the pattern:

{{{<GEMS_INSTALL_DIR>/templates/default/ClientModelObject.extension}}} 

GEMS will match the element against templates with any arbitrary file extension e.g. 
{{{
ClientModelObject.htm
ClientModelObject.foo
etc.
}}}

The file extension is used to determine the !TemplateExecutor implementation that should be used to interpret it. You should add templates for your model elements by creating a new subdirectory of your templates directory corresponding to the name of the model type and then placing appropriately named template files within it.

= Default GEMS Template Language =

The default GEMS template language is attached to the ".htm" file extension. The default template language allows you to bind values from the client and the model to the html. For example, the template:

{{{
<html>
 <head></head>
 <body>
  <div style="width:${width}; height:${height}">
   <b>My Element ID is ${id}!</b>
  </div>
 </body>
</html>
}}}

uses the ${width} and ${height} placeholders to insert the client view's current width and height. If the user resizes the element's view, the template is re-interpreted and these values are updated. Similarly, the ${id} property is used to get the id of the model element that the view is bound to. Properties that are installed on the element can be referred to via ${model.propertyname}.

The standard GEMS template language can be run on either the client or the server. To have the template run on the client and not require a roundtrip to the server on updates, the template's very first line should be:
{{{
<!--GEMS_Client-->
}}}

= Interpretation of HTML on the Client =

Arbitrary HTML code can be sent to the client as the result of interpreting a template. The code must only follow a few small conventions:

  # the HTML must have `<html>` tags surrounding it
  # all javascripts and CSS stylesheets that are loaded must be referenced in a `<head>` tag section that follows the `<html>` tag
  # the HTML must have a valid `<body>` tag section

For example, valid HTML to return could look like:

{{{
<html>
<head>
<link rel="stylesheet" type="text/css" href="js/lightbox/lightbox.css" />
<script type="text/javascript" 
        src="js/lightbox/lightbox.js" 
        readyif="window.initLightbox != null" 
        init="initLightbox();"  
        onupdate="initLightbox();">
</script>
</head>

<body>

<div style="width:100%; height:100%">
  <img src="img/block.png">
</div>

<div style="position:absolute; top:0; left:0; margin:10 10 10 10;">
Model Object:${id}
<a href="img/block.jpg" rel="lightbox" title="my caption"><img src="img/b.gif" /></a> 
</div>
</body>
</html>
}}}

This HTML loads a javascript and a CSS stylesheet in its head. Any javascripts or stylesheets that are returned with the template HTML are dynamically loaded into the client browser. Furthermore, GEMS guarantees that the same script or stylesheet is loaded exactly once regardless of how many times the javascript or stylesheet shows up in HTML returned from templates to the client. 

Because the javascript is loaded dynamically, it cannot use the document's onLoad method to execute. GEMS provides hooks that can be used to:
  # Check to make sure your script is loaded properly
  # Call a method on your script to initialize it the first time it is loaded (from any template)
  # Call a method on your script each time the template is re-interpreted and the result is sent back to the browser

The hooks can be seen in the following code snippet:
{{{
<script type="text/javascript" 
        src="js/lightbox/lightbox.js" 
        readyif="window.initLightbox != null"  
        init="initLightbox();"  
        onupdate="initLightbox();">
</script>
}}}

The "readyif" attribute specifies a javascript expression to execute via "eval()" to determine if your script has finished loading. The javascript expression MUST RETURN A BOOLEAN. The "init" attribute specifies a javascript expression to execute via "eval()" once the script has successfully loaded. This expression will be executed once for the entire modeling session. If other templates reference the script and the init function, the script will only be loaded once and the init function called a single time. The "onupdate" attribute specifies a javascript expression to run each time the template is re-interpreted and the result has been loaded into the view on the client.

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages